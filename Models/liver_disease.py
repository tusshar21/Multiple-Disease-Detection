# -*- coding: utf-8 -*-
"""Liver Disease.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b9NSofaCbAhk6U_6xtgu-girV4vKvlAJ
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from imblearn.over_sampling import SMOTE
import pickle



liver_dataset = pd.read_csv('/content/Liver data1.csv', encoding='latin1')

#print("Original Result Distribution:\n", liver_dataset['Result'].value_counts())

liver_dataset = liver_dataset.dropna()
liver_dataset['Result'] = liver_dataset['Result'].map({ 1:1, 2: 0})

# Ensure there are both classes in the target variable
if liver_dataset['Result'].nunique() != 2:
    raise ValueError("Target variable should have two classes.")

X=liver_dataset.drop(columns='Result',axis=1)
Y=liver_dataset['Result']

scaler=StandardScaler()

scaler.fit(X)

standardized_data=scaler.transform(X)

print(standardized_data)

X= standardized_data
Y= liver_dataset['Result']

# Apply SMOTE to handle class imbalance
smote = SMOTE(random_state=42)
X_smote, Y_smote = smote.fit_resample(X, Y)
# Check the distribution after SMOTE
print("SMOTE Result Distribution:\n", pd.Series(Y_smote).value_counts())

print(X)
print(Y)

X_train,X_test, Y_train, Y_test=train_test_split(X_smote,Y_smote,test_size=0.2,stratify=Y_smote,random_state=42)

classifier= LogisticRegression(random_state=42)

classifier.fit(X_train,Y_train)

X_train_prediction= classifier.predict(X_train)

X_train_accuracy= accuracy_score(X_train_prediction,Y_train)

print(X_train_accuracy)

X_test_prediction= classifier.predict(X_test)
X_test_accuracy= accuracy_score(X_test_prediction,Y_test)
print(X_test_accuracy)

input_data=(65, 0, 0.7, 0.1, 187, 16, 18, 6.8, 3.3, 0.9)
 input_np=np.asarray(input_data)
 input_np_reshaped=input_np.reshape(1,-1)
 std_data=scaler.transform(input_np_reshaped)
 print(std_data)
 input_prediction=classifier.predict( std_data)
 print(input_prediction)
if(input_prediction==1):
  print('Liver Disease Present')
else:
  print('Liver Disease not present')

#import pickle

#filename='Liver_Disease.sav'
pickle.dump(classifier,open(filename,'wb'))

#model_loaded=pickle.load(open('Liver_Disease.sav','rb'))

